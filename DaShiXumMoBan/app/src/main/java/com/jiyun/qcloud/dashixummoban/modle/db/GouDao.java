package com.jiyun.qcloud.dashixummoban.modle.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "GOU".
*/
public class GouDao extends AbstractDao<Gou, Long> {

    public static final String TABLENAME = "GOU";

    /**
     * Properties of entity Gou.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Image = new Property(1, String.class, "image", false, "image");
        public final static Property Name = new Property(2, String.class, "name", false, "name");
        public final static Property Jia = new Property(3, String.class, "jia", false, "jia");
        public final static Property Position = new Property(4, int.class, "position", false, "position");
        public final static Property He = new Property(5, String.class, "he", false, "he");
    }


    public GouDao(DaoConfig config) {
        super(config);
    }
    
    public GouDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"GOU\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"image\" TEXT," + // 1: image
                "\"name\" TEXT," + // 2: name
                "\"jia\" TEXT," + // 3: jia
                "\"position\" INTEGER NOT NULL ," + // 4: position
                "\"he\" TEXT);"); // 5: he
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GOU\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Gou entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String image = entity.getImage();
        if (image != null) {
            stmt.bindString(2, image);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String jia = entity.getJia();
        if (jia != null) {
            stmt.bindString(4, jia);
        }
        stmt.bindLong(5, entity.getPosition());
 
        String he = entity.getHe();
        if (he != null) {
            stmt.bindString(6, he);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Gou entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String image = entity.getImage();
        if (image != null) {
            stmt.bindString(2, image);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String jia = entity.getJia();
        if (jia != null) {
            stmt.bindString(4, jia);
        }
        stmt.bindLong(5, entity.getPosition());
 
        String he = entity.getHe();
        if (he != null) {
            stmt.bindString(6, he);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Gou readEntity(Cursor cursor, int offset) {
        Gou entity = new Gou( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // image
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // jia
            cursor.getInt(offset + 4), // position
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // he
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Gou entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setImage(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setJia(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPosition(cursor.getInt(offset + 4));
        entity.setHe(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Gou entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Gou entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Gou entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
